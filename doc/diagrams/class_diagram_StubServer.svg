<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="129.6px" preserveAspectRatio="none" style="width:1148px;height:129px;" version="1.1" viewBox="0 0 1148 129" width="1148.85px" zoomAndPan="magnify"><defs><filter height="300%" id="f13421ukukl41y" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.7"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="5.4" dy="5.4" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><!--MD5=[a3110d17efec2fc315b6c84cbc79d2cb]
class StubServer--><rect codeLine="3" fill="#FEFECE" filter="url(#f13421ukukl41y)" height="102.157" id="StubServer" style="stroke:#A80036;stroke-width:2.0250000000000004;" width="1120.5" x="9.45" y="9.45"/><ellipse cx="523.4625" cy="31.05" fill="#ADD1B2" rx="14.85" ry="14.85" style="stroke:#A80036;stroke-width:1.35;"/><path d="M526.1625,26.325 Q526.4367,25.65 526.7531,25.3125 Q527.0695,24.975 527.4281,24.975 Q528.0609,24.975 528.4617,25.3547 Q528.8625,25.7344 528.8625,26.6203 L528.8625,28.7297 Q528.8625,29.6156 528.4828,29.9953 Q528.1031,30.375 527.5125,30.375 Q526.9852,30.375 526.6477,30.143 Q526.3102,29.9109 526.1625,29.2992 Q526.0992,28.8773 525.8672,28.6453 Q525.4453,28.2023 524.6859,27.9492 Q523.9266,27.675 523.1672,27.675 Q522.218,27.675 521.4164,28.0547 Q520.6359,28.4344 520.0242,29.2781 Q519.4125,30.1219 519.4125,31.282 L519.4125,32.5266 Q519.4125,33.9188 520.5516,34.8469 Q521.6906,35.775 523.7156,35.775 Q524.918,35.775 525.7617,35.5008 Q526.2469,35.3531 526.7953,34.868 Q527.1539,34.5938 527.3438,34.5094 Q527.5336,34.425 527.7656,34.425 Q528.2086,34.425 528.525,34.7836 Q528.8625,35.1211 528.8625,35.6063 Q528.8625,36.0703 528.3984,36.6188 Q527.7234,37.4203 526.6477,37.8633 Q525.2344,38.475 523.5047,38.475 Q521.4797,38.475 519.8555,37.6734 Q518.5477,37.0406 517.6195,35.6695 Q516.7125,34.2984 516.7125,32.6742 L516.7125,31.1977 Q516.7125,29.5102 517.5141,28.0336 Q518.3367,26.557 519.75,25.7766 Q521.1844,24.975 522.7875,24.975 Q523.7578,24.975 524.6016,25.3125 Q525.4453,25.65 526.1625,26.325 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="16.2" lengthAdjust="spacing" textLength="81" x="551.1375" y="37.6787">StubServer</text><line style="stroke:#A80036;stroke-width:2.0250000000000004;" x1="10.8" x2="1128.6" y1="52.65" y2="52.65"/><line style="stroke:#A80036;stroke-width:2.0250000000000004;" x1="10.8" x2="1128.6" y1="63.45" y2="63.45"/><ellipse cx="24.3" cy="78.3" fill="#84BE84" rx="4.05" ry="4.05" style="stroke:#038048;stroke-width:1.35;"/><text fill="#000000" font-family="sans-serif" font-size="14.85" lengthAdjust="spacing" text-decoration="underline" textLength="1085.4" x="36.45" y="84.2656">void receiveAsync(DatagramSocket datagramSocket, int numHandlerThreads, int maxMessageSize, Map&lt;Integer, Function&lt;List&lt;Serializable&gt;, Serializable&gt;&gt; callbacks)</text><ellipse cx="24.3" cy="96.9785" fill="#84BE84" rx="4.05" ry="4.05" style="stroke:#038048;stroke-width:1.35;"/><text fill="#000000" font-family="sans-serif" font-size="14.85" lengthAdjust="spacing" text-decoration="underline" textLength="873.45" x="36.45" y="102.9441">void handleMessage(InetAddress inetAddress, int port, byte[] data, Map&lt;Integer, Function&lt;List&lt;Serializable&gt;, Serializable&gt;&gt; callbacks)</text><!--MD5=[9701d59137587426ead5157eaea90b10]
@startuml
'https://plantuml.com/class-diagram

class StubServer{
    {static} + void receiveAsync(DatagramSocket datagramSocket, int numHandlerThreads, int maxMessageSize, Map<Integer, Function<List<Serializable>, Serializable>> callbacks)
    {static} + void handleMessage(InetAddress inetAddress, int port, byte[] data, Map<Integer, Function<List<Serializable>, Serializable>> callbacks)
}

@enduml

@startuml

class StubServer{
    {static} + void receiveAsync(DatagramSocket datagramSocket, int numHandlerThreads, int maxMessageSize, Map<Integer, Function<List<Serializable>, Serializable>> callbacks)
    {static} + void handleMessage(InetAddress inetAddress, int port, byte[] data, Map<Integer, Function<List<Serializable>, Serializable>> callbacks)
}

@enduml

PlantUML version 1.2021.01(Tue Feb 02 02:55:08 EST 2021)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: Cp1252
Language: en
Country: US
--></g></svg>